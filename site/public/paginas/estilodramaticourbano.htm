<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vitrine Fashion | Estilo Dramático Urbano</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Cormorant+Garamond&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="../index.css">
    <link rel="stylesheet" href="../style/estilocasual.css">
    <link rel="stylesheet" href="../style/estilodramaticourbano.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body onload="obterDadosGrafico">
    <div class="header">
        <div class="container">
          <a href="../paginas/index - Copia.html"><h1 class="titulo">Vitrine Fashion</h1></a>
        <ul class="navbar">
            <li> <a href="../paginas/index - Copia.html">Home</a></li>
            <li><a href="">Estilos</a>
            <ul class="dropdown">
              <li><a href="estiloromantico.htm">Rômantico</a></li>
              <li><a href="estiloclassico.htm">Clássico</a></li>
              <li><a href="estilocasual.htm">Casual</a></li>
              <li><a href="estilocriativo.htm">Criativo</a></li>
              <li><a href="estilodramaticourbano.htm">Dramático Urbano</a></li>
              <li><a href="estiloelegante.htm">Elegante</a></li>
              <li><a href="estilosexy.htm">Sexy</a></li>
            </ul></li>
            <li><a href="noticias.htm">Notícias</a></li>
            <button onclick="limparSessao()">Sair</button>
        </ul>
        </div>
    </div>
   <div class="banner2"></div>

    <div class="social2">
      <div class="container2">
        <h1>Estilo Dramático Urbano</h1> 
          <div class="desc-estilo">
          <p > 
            O estilo casual é uma das opções mais populares e versáteis quando se trata de moda. Ele se caracteriza por ser confortável, despojado e prático, sendo ideal para o dia a dia e para momentos mais informais. O estilo casual permite combinar peças de roupa básicas, como camisetas, calças jeans, tênis e sapatilhas, de uma forma descontraída e elegante.
             Para criar um look casual, é importante equilibrar o conforto com a elegância. Isso significa escolher roupas que te deixem à vontade, mas que também sejam adequadas para a ocasião. As cores neutras, como preto, branco, cinza e azul marinho, são excelentes opções para criar um visual casual, pois são fáceis de combinar e transmitem uma sensação de sofisticação. 
             Além disso, é possível acrescentar acessórios ao look para deixá-lo mais interessante e moderno. Óculos de sol, relógios, bolsas e lenços são alguns dos itens que podem complementar o estilo casual com elegância e charme. O importante é sentir-se bem e confiante com as escolhas que fizer, pois isso reflete diretamente na sua aparência e na sua atitude.
            </p>
      </div>
      </div>

        <div class="social2">
          <h1>Como os acessórios fazem diferença</h1>
          </h1>
          <div class="boxes"> 
              <div class="box" id="img">
                  <a href="#">
                      <img src="../imgs/estilo-dramatico/alfaiataria.jpg" alt="" >
                  </a>
                   <p>Peças de alfaiataria.</p>
              </div>
              <div class="box">
                  <a href="">
                      <img src="../imgs/estilo-dramatico/allblack.jpg" alt="" > 
                  </a>
                  <p>Peças All Black.</p>
              </div>
              <div class="box">
                <a href="">
                    <img src="../imgs/estilo-dramatico/volumeassimetria.jpg" alt="" > 
                </a>
                <p>Volume e assimetria.</p>
            </div>
              
          </div>
        
        <div class="container2">
          <h1>Combinações de peças</h1> 
            <div class="desc-estilo">
        </div>
        </div>
        
            
       <div class="responsive">
       <div class="gallery">
       <a target="_blank" href="../imgs/estilo-dramatico/dramaticourbano/dr1.jpg">
        <img src="../imgs/estilo-dramatico/dramaticourbano/dr1.jpg" alt="" width="300" height="300">
       </a>
      </div>
      </div>
  
  
     <div class="responsive">
     <div class="gallery">
      <a target="_blank" href="../imgs/estilo-dramatico/dramaticourbano/dr2.jpg">
        <img src="../imgs/estilo-dramatico/dramaticourbano/dr2.jpg" alt="Forest" width="300" height="300">
      </a>
     </div>
     </div>
  
     <div class="responsive">
     <div class="gallery">
      <a target="_blank" href="../imgs/estilo-dramatico/dramaticourbano/dr3.jpg">
        <img src="../imgs/estilo-dramatico/dramaticourbano/dr3.jpg" alt="Northern Lights" width="300" height="300">
      </a>
     </div>
     </div>
  
     <div class="responsive">
     <div class="gallery">
      <a target="_blank" href="../imgs/estilo-dramatico/dramaticourbano/dr4.jpg">
        <img src="../imgs/estilo-dramatico/dramaticourbano/dr4.jpg" alt="Mountains" width="300" height="300">
      </a>
     </div>
     </div>

     <div class="espaco" style="color: white;">.</div>

     <div class="responsive">
      <div class="gallery">
      <a target="_blank" href="../imgs/estilo-dramatico/dramaticourbano/dr5.jpg">
        <img src="../imgs/estilo-dramatico/dramaticourbano/dr5.jpg" alt="Mountains" width="300" height="300">
      </a>
      </div>
     </div>

     <div class="responsive">
     <div class="gallery">
      <a target="_blank" href="../imgs/estilo-dramatico/dramaticourbano/dr6.jpg">
        <img src="../imgs/estilo-dramatico/dramaticourbano/dr6.jpg" alt="Mountains" width="300" height="300">
      </a>
     </div>
     </div>

     <div class="responsive">
      <div class="gallery">
      <a target="_blank" href="../imgs/estilo-dramatico/dramaticourbano/dr7.jpg">
        <img src="../imgs/estilo-dramatico/dramaticourbano/dr7.jpg" alt="Mountains" width="300" height="300">
      </a>
     </div>
     </div>

     <div class="responsive">
     <div class="gallery">
      <a target="_blank" href="../imgs/estilo-dramatico/dramaticourbano/dr8.jpg">
        <img src="../imgs/estilo-dramatico/dramaticourbano/dr8.jpg" alt="Mountains" width="300" height="300">
      </a>
     </div>
     </div>
 
     <div class="espaco" style="color: white;">.</di>
      <div class="card-grafico">
        <h2>A importância das temperaturas regionais no look</h2>
        <p>
            Cada região possui variações de temperatura que podem afetar diretamente o nosso conforto e bem-estar. Ao montar um look, é fundamental considerar essas diferenças e adaptar-se ao clima local.
        </p>
      
          <div id="metricaEstilo">
            <div class="grafico">
            <canvas id="EstiloBarra"> </canvas>
            </div>
          </div>
          <p>
            O gráfico ilustra a diversidade de preferências de estilo entre as pessoas. Podemos observar uma ampla gama de estilos que refletem as particularidades de cada indivíduo.
        </p>
        <p>
            Além disso, é importante destacar que o estilo pessoal não é fixo e imutável. As pessoas têm a liberdade de explorar e experimentar diferentes estilos ao longo do tempo, refletindo mudanças em suas vidas e evolução pessoal.
        </p>
    </div>
</div> 
<div class="footer" style="color: white;">
  <a href="https://www.instagram.com/raquelmiy/"><img src="../imgs/home/instagram.png" alt=""></a>
        <a href="https://www.linkedin.com/in/raquel-vitoria-sousa-guimar%C3%A3es-55470917b/"><img src="./imgs/home/linkedin.png" alt=""></a>
    <p>Created by Raquel</p>
  </div>
</body>
</html>
<script>

  let proximaAtualizacao;

  window.onload = obterDadosGraficos();

  function obterDadosGraficos() {
      obterDadosGrafico(1)
  }



  // O gráfico é construído com três funções:
  // 1. obterDadosGrafico -> Traz dados do Banco de Dados para montar o gráfico da primeira vez
  // 2. plotarGrafico -> Monta o gráfico com os dados trazidos e exibe em tela
  // 3. atualizarGrafico -> Atualiza o gráfico, trazendo novamente dados do Banco

  // Esta função *obterDadosGrafico* busca os últimos dados inseridos em tabela de medidas.
  // para, quando carregar o gráfico da primeira vez, já trazer com vários dados.
  // A função *obterDadosGrafico* também invoca a função *plotarGrafico*

  //     Se quiser alterar a busca, ajuste as regras de negócio em src/controllers
  //     Para ajustar o "select", ajuste o comando sql em src/models
  function obterDadosGrafico(idAquario) {



      if (proximaAtualizacao != undefined) {
          clearTimeout(proximaAtualizacao);
      }

      fetch(`/medidas/buscarEstilos/${idAquario}`, { cache: 'no-store' }).then(function (response) {
          if (response.ok) {
              response.json().then(function (resposta) {
                  console.log(`Dados recebidos: ${JSON.stringify(resposta)}`);
                  resposta.reverse();

                  plotarGrafico(resposta, idAquario);

              });
          } else {
              console.error('Nenhum dado encontrado ou erro na API');
          }
      })
          .catch(function (error) {
              console.error(`Erro na obtenção dos dados p/ gráfico: ${error.message}`);
          });
  }

  // Esta função *plotarGrafico* usa os dados capturados na função anterior para criar o gráfico
  // Configura o gráfico (cores, tipo, etc), materializa-o na página e, 
  // A função *plotarGrafico* também invoca a função *atualizarGrafico*
  function plotarGrafico(resposta, idAquario) {

      console.log('iniciando plotagem do gráfico...');

      // Criando estrutura para plotar gráfico - labels
      let labels = [];

      // Criando estrutura para plotar gráfico - dados
      let dados = {
          labels: labels,
          datasets: [{
              label: '',
              data: [],
          },
          {
              label: 'Estilos',
              data: [],
              fill: false,
              borderColor: 'rgb(199, 52, 52)',
              backgroundColor: ['#b59081', '#b59081','#b59081','#b59081','#b59081','#b59081','#b59081',],
              tension: 0.1
          }]
      };

      console.log('----------------------------------------------')
      console.log('Estes dados foram recebidos pela funcao "obterDadosGrafico" e passados para "plotarGrafico":')
      console.log(resposta)

      // Inserindo valores recebidos em estrutura para plotar o gráfico
      for (i = 0; i < resposta.length; i++) {
          var registro = resposta[i];
          labels.push(registro.Estilo);
          dados.datasets[0].data.push(registro.Estilo);
          dados.datasets[1].data.push(registro.Voto);
      }

      console.log('----------------------------------------------')
      console.log('O gráfico será plotado com os respectivos valores:')
      console.log('Labels:')
      console.log(labels)
      console.log('Dados:')
      console.log(dados.datasets)
      console.log('----------------------------------------------')

      // Criando estrutura para plotar gráfico - config
      const config = {
          type: 'bar',
          data: dados,
      };

      // Adicionando gráfico criado em div na tela
      let myChart = new Chart(
          document.getElementById(`EstiloBarra`),
          config
      );

      setTimeout(() => atualizarGrafico(idAquario, dados, myChart), 2000);
  }


  // Esta função *atualizarGrafico* atualiza o gráfico que foi renderizado na página,
  // buscando a última medida inserida em tabela contendo as capturas, 

  //     Se quiser alterar a busca, ajuste as regras de negócio em src/controllers
  //     Para ajustar o "select", ajuste o comando sql em src/models
  function atualizarGrafico(idAquario, dados, myChart) {



      fetch(`/medidas/buscarEstilo/${idAquario}`, { cache: 'no-store' }).then(function (response) {
          if (response.ok) {
              response.json().then(function (novoRegistro) {

                  obterdados(idAquario);
                  // alertar(novoRegistro, idAquario);
                  console.log(`Dados recebidos: ${JSON.stringify(novoRegistro)}`);
                  console.log(`Dados atuais do gráfico:`);
                  console.log(dados);

                  let avisoCaptura = document.getElementById(`avisoCaptura${idAquario}`)
                  avisoCaptura.innerHTML = ""


                  if (novoRegistro[0].momento_grafico == dados.labels[dados.labels.length - 1]) {
                      console.log("---------------------------------------------------------------")
                      console.log("Como não há dados novos para captura, o gráfico não atualizará.")
                      avisoCaptura.innerHTML = "<i class='fa-solid fa-triangle-exclamation'></i> Foi trazido o dado mais atual capturado pelo sensor. <br> Como não há dados novos a exibir, o gráfico não atualizará."
                      console.log("Horário do novo dado capturado:")
                      console.log(novoRegistro[0].momento_grafico)
                      console.log("Horário do último dado capturado:")
                      console.log(dados.labels[dados.labels.length - 1])
                      console.log("---------------------------------------------------------------")
                  } else {
                      // tirando e colocando valores no gráfico
                      dados.labels.push(novoRegistro[0].momento_grafico); // incluir um novo momento


                      dados.datasets[0].data.push(novoRegistro[0].umidade); // incluir uma nova medida de umidade


                      dados.datasets[1].data.push(novoRegistro[0].temperatura); // incluir uma nova medida de temperatura
                  }

                  // Altere aqui o valor em ms se quiser que o gráfico atualize mais rápido ou mais devagar
                  proximaAtualizacao = setTimeout(() => atualizarGrafico(idAquario, dados, myChart), 2000);
              });
          } else {
              console.error('Nenhum dado encontrado ou erro na API');
              // Altere aqui o valor em ms se quiser que o gráfico atualize mais rápido ou mais devagar
              proximaAtualizacao = setTimeout(() => atualizarGrafico(idAquario, dados, myChart), 2000);
          }
      })
          .catch(function (error) {
              console.error(`Erro na obtenção dos dados p/ gráfico: ${error.message}`);
          });

  }
</script>